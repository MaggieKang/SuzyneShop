<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hannamsm.shop.domain.order.dao.OrderDao">
<select id="findAllCount" parameterType="com.hannamsm.shop.domain.order.vo.OrderSearch" resultType="int">
select count(a.order_id) as totalCount
  from orders a
 where a.account_no = #{accountNo}
   and a.store_id = #{storeId}
    <if test="orderId != null and orderId != ''">
   and a.order_id = #{orderId}
    </if>
</select>

<select id="findAll" parameterType="com.hannamsm.shop.domain.order.vo.OrderSearch" resultType="com.hannamsm.shop.domain.order.vo.OrderDto">
select a.order_id          as orderId
     , a.store_id          as storeId
     , (select top 1 city from store s2 where store_id = a.store_id) as storeNm
     , a.order_date        as orderDate
     , (select top 1 s2.item_kr_nm +'/'+ s2.item_en_nm +' '+ s2.item_size +'...'
         from orders_detail s1
              inner join item s2 on s2.store_id = s1.store_id and s2.item_id = s1.item_id and s2.is_use = 1
        where s1.store_id = a.store_id
          and s1.order_id = a.order_id ) as titleNm
     , (a.total_amount + a.total_gst_fee + a.total_pst_fee + a.total_eco_fee + a.total_deposit_fee) as grandTotalPrice
     , a.total_amount      as totalAmount
     , a.total_gst_fee     as totalGstFee
     , a.total_pst_fee     as totalPstFee
     , a.total_eco_fee     as totalEcoFee
     , a.total_deposit_fee as totalDepositFee
     , a.slot_dt           as slotDt
     , format(cast(a.slot_time AS datetime), 'HH:mm') as slotTime
     , format(cast(a.slot_time AS datetime), 'hh tt') as startDisplaySlotTime
     , format(cast(dateadd(hour, 1, a.slot_time) AS datetime), 'hh tt') as endDisplaySlotTime
     , (select count(od.item_id) from orders_detail od where od.store_id = a.store_id and od.order_id = a.order_id) as itemCount
     , a.customer_contact_number as customerContactNumber
     , a.order_status_cd   as orderStatusCd
  from orders a
 where a.account_no = #{accountNo}
   and a.store_id = #{storeId}
    <if test="orderId != null and orderId != ''">
   and a.order_id = #{orderId}
    </if>
 order by a.order_id
offset #{startRownum} rows
 fetch next #{listSize} row only
</select>

<select id="findByIdCount" parameterType="com.hannamsm.shop.domain.order.vo.OrderSearch" resultType="int">
select count(b.item_id) as totalCount
  from orders a
       inner join orders_detail b on b.store_id = a.store_id and b.order_id = a.order_id
 where a.account_no = #{accountNo}
   and a.store_id = #{storeId}
   and a.order_id = #{orderId}
</select>

<select id="findById" parameterType="com.hannamsm.shop.domain.order.vo.OrderSearch" resultType="com.hannamsm.shop.domain.order.vo.OrderDetailDto">
select a.order_id                     as orderId
     , a.store_id                     as storeId
     , b.item_sales_type_cd           as itemSalesTypeCd
     , b.item_id                      as itemId
     , c.item_kr_nm                   as itemKrNm
     , c.item_en_nm                   as itemEnNm
     , c.item_size                    as itemSize
     , b.item_tax_cd                  as itemTaxCd
     , b.item_deposit_cd              as itemDepositCd
     , b.item_eco_cd                  as itemEcoCd
     , b.order_qty                    as orderQty
     , b.sales_bundle_amount          as salesBundleAmount
     , b.sales_bundle_gst_fee         as salesBundleGstFee
     , b.sales_bundle_pst_fee         as salesBundlePstFee
     , b.sales_bundle_eco_fee         as salesBundleEcoFee
     , b.sales_bundle_deposit_fee     as salesBundleDepositFee
     , b.sales_bundle_regular_price   as salesBundleRegularPrice
     , b.sales_bundle_qty             as salesBundleQty
     , b.sales_bundle_price           as salesBundlePrice
     , b.sales_bundle_discount_rate   as salesBundleDiscountRate
     , isnull(e.cmn_file_url,'proct-photos/np_image_available.jpg') as imgUrl
  from orders a
       inner join orders_detail b on b.store_id = a.store_id and b.order_id = a.order_id
       left join item c on c.store_id = b.store_id and c.item_id = b.item_id
       left join item_file d on d.store_id = c.store_id and d.item_id = c.item_id and d.seq = 1
       left join cmn_file e on e.cmn_file_id = d.cmn_file_id
 where a.account_no = #{accountNo}
   and a.store_id = #{storeId}
   and a.order_id = #{orderId}
 order by a.order_id
offset #{startRownum} rows
 fetch next #{listSize} row only
</select>

<select id="createOrderId" parameterType="string" resultType="String">
select (#{storeId} + convert(varchar, getDate(), 12) + right('0000000000' + convert(varchar, (next value for seq_order_id)), 10)) as order_id
</select>

<insert id="createOrdersDetailFromCart" parameterType="com.hannamsm.shop.domain.order.vo.NewOrderDto">
insert into orders_detail (
       order_id
     , store_id
     , item_id
     , item_sales_type_cd
     , item_sales_status_cd
     , item_tax_cd
     , item_deposit_cd
     , item_eco_cd
     , order_qty
     , pickup_qty
     , sales_bundle_amount
     , sales_bundle_gst_fee
     , sales_bundle_pst_fee
     , sales_bundle_eco_fee
     , sales_bundle_deposit_fee
     , sales_bundle_receiving_price
     , sales_bundle_regular_price
     , sales_bundle_qty
     , sales_bundle_price
     , sales_bundle_discount_rate
     , reg_date
     , reg_person
     , last_mod_date
     , last_mod_person
)
select #{orderId} as order_id
     , m.store_id
     , m.item_id
     , m.item_sales_type_cd
     , 'READY' as item_sales_status_cd
     , m.item_tax_cd
     , m.item_deposit_cd
     , m.item_eco_cd
     , m.item_qty
     , 0 as pickup_qty
     , ((m.item_qty/m.sales_bundle_qty) * m.sales_bundle_price) as sales_bundle_amount
     , (case when ('G' = m.item_tax_cd or 'B' = m.item_tax_cd) then (((m.item_qty/m.sales_bundle_qty) * m.sales_bundle_price) * 0.05) else 0 end) as sales_bundle_gst_fee
     , (case when ('B' = m.item_tax_cd) then (((m.item_qty/m.sales_bundle_qty) * m.sales_bundle_price) * 0.07) else 0 end) as sales_bundle_pst_fee
     , ((isnull((case when m.item_eco_cd is null then 0
                     else (select EcoFee from mfProdEco where ReturnType = m.item_eco_cd)
                 end),0)) * m.sales_bundle_qty
       ) as sales_bundle_eco_fee
     , ((isnull((case when m.item_deposit_cd is null then 0
                      else (select TotalFee from tblEncorp where ReturnType = m.item_deposit_cd)
                 end),0)) * m.sales_bundle_qty
       ) as sales_bundle_deposit_fee
     , (m.receiving_price * m.sales_bundle_qty) as sales_bundle_receiving_price
     , (m.regular_price * m.sales_bundle_qty) as sales_bundle_regular_price
     , m.sales_bundle_qty
     , m.sales_bundle_price
     , (ceiling((((m.regular_price * m.sales_bundle_qty) - m.sales_bundle_price)/(m.regular_price * m.sales_bundle_qty))*100)) as discountRate
     , getDate() as reg_date
     , #{accountNo} as reg_person
     , getDate() as last_mod_date
     , #{accountNo} as last_mod_person
  from (
        select a.store_id
             , a.item_id
             , a.item_sales_type_cd
             , a.item_qty
             , b.item_tax_cd
             , b.item_deposit_cd
             , b.item_eco_cd
             , b.receiving_price
             , b.regular_price
             , (case when ('P01' = a.item_sales_type_cd or 'P02' = a.item_sales_type_cd) then b.promotion_bundle_qty
                     when ('M01' = a.item_sales_type_cd or 'M02' = a.item_sales_type_cd) then b.member_bundle_qty
                     else 1
                end) as sales_bundle_qty
             , (case when ('P01' = a.item_sales_type_cd or 'P02' = a.item_sales_type_cd) then b.promotion_price
                     when ('M01' = a.item_sales_type_cd or 'M02' = a.item_sales_type_cd) then b.member_price
                     else b.regular_price
                end) as sales_bundle_price
          from cart a
               inner join item b on b.store_id = a.store_id and b.item_id = a.item_id
         where a.account_no = #{accountNo}
           and a.store_id = #{storeId}
       ) m
</insert>

<insert id="createOrdersFromCart" parameterType="com.hannamsm.shop.domain.order.vo.NewOrderDto">
insert into orders (
       order_id
     , store_id
     , order_date
     , customer_contact_number
     , total_amount
     , total_gst_fee
     , total_pst_fee
     , total_eco_fee
     , total_deposit_fee
     , account_no
     , slot_dt
     , slot_time
     , order_status_cd
     , reg_date
     , reg_person
     , last_mod_date
     , last_mod_person
)
select a.order_id                      as order_id
     , a.store_id                      as store_id
     , getDate()                       as order_date
     , #{customerContactNumber}        as customer_contact_number
     , sum(a.sales_bundle_amount)      as total_amount
     , sum(a.sales_bundle_gst_fee)     as total_gst_fee
     , sum(a.sales_bundle_pst_fee)     as total_pst_fee
     , sum(a.sales_bundle_eco_fee)     as total_eco_fee
     , sum(a.sales_bundle_deposit_fee) as total_deposit_fee
     , #{accountNo}                    as account_no
     , #{slotDt}                       as slot_dt
     , #{slotTime}                     as slot_time
     , 'ORDERED'                       as order_status_cd
     , getDate()                       as reg_date
     , #{accountNo}                    as reg_person
     , getDate()                       as last_mod_date
     , #{accountNo}                    as last_mod_person
  from orders_detail a
 where a.store_id = #{storeId}
   and a.order_id = #{orderId}
 group by a.order_id, a.store_id;
</insert>

<update id="updateOrders" parameterType="com.hannamsm.shop.domain.order.vo.Order">
update orders
   set last_mod_date = getDate()
     , last_mod_person = #{accountNo}
   <if test="customerContactNumber != null and customerContactNumber != ''">
     , customer_contact_number = #{customerContactNumber}
   </if>
   <if test="totalAmount != null and totalAmount != ''">
     , total_amount = #{totalAmount}
   </if>
   <if test="totalGstFee != null and totalGstFee != ''">
     , total_gst_fee = #{totalGstFee}
   </if>
   <if test="totalPstFee != null and totalPstFee != ''">
     , total_pst_fee = #{totalPstFee}
   </if>
   <if test="totalEcoFee != null and totalEcoFee != ''">
     , total_eco_fee = #{totalEcoFee}
   </if>
   <if test="totalDepositFee != null and totalDepositFee != ''">
     , total_deposit_fee = #{totalDepositFee}
   </if>
   <if test="orderStatusCd != null and orderStatusCd != ''">
     , order_status_cd = #{orderStatusCd}
   </if>
   <if test="invoiceId != null and invoiceId != ''">
     , invoice_id = #{invoiceId}
   </if>
   <if test="slotDt != null and invoiceId != ''">
     , slot_dt = #{slotDt}
   </if>
   <if test="slotTime != null and invoiceId != ''">
     , slot_time = #{slotTime}
   </if>
 where store_id = #{storeId}
   and order_id = #{orderId}
</update>
</mapper>